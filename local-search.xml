<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>自动获取微博访客Cookie</title>
    <link href="/2021/10/26/%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E8%AE%BF%E5%AE%A2Cookie/"/>
    <url>/2021/10/26/%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E5%BE%AE%E5%8D%9A%E8%AE%BF%E5%AE%A2Cookie/</url>
    
    <content type="html"><![CDATA[<h1 id="自动获取访客Cookie"><a href="#自动获取访客Cookie" class="headerlink" title="自动获取访客Cookie"></a>自动获取访客Cookie</h1><blockquote><p>想要通过Java来获取微博热搜，然后通过企业号给自己做相关推送，但第一道拦路虎就是微博的Cookie。</p><p>微博存在一个Sina Visitor System，即无需登录就能访问的页面，但是也需要获得一个访客cookie才能访问。</p><p>一阵Google看了不少获取有效访客Cookie博客。这里也做一下总结，同时奉上自己的实现代码</p><p>参考博文：</p><p>①<a href="https://cloud.tencent.com/developer/article/1615151">微博爬虫——自动获取访客Cookie - 云+社区 - 腾讯云 (tencent.com)</a></p><p>②<a href="https://juejin.cn/post/6844904084080689165">JAVA微博爬虫高级篇——自动获取微博cookie（无须账号、每日百万量级） - 掘金 (juejin.cn)</a></p></blockquote><p>两位大佬已经做了原理分析，这里就不再做原理分析了，直接上代码</p><blockquote><p>这里有个缺陷，即并不能保证每次都可以获取到SUB和SUBP两个值。有时是获取不到的，获取失败时只需要重新获取就可以</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> cn.hutool.http.Header;<br><span class="hljs-keyword">import</span> cn.hutool.http.HttpResponse;<br><span class="hljs-keyword">import</span> cn.hutool.http.HttpUtil;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Description: 自动获取微博访客cookie</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: zzl</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021-10-26 22:51</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeiBoCookieTool</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TID_REGEX = <span class="hljs-string">&quot;tid\&quot;:\&quot;(.*?)\&quot;,\&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SUB_REGEX = <span class="hljs-string">&quot;\&quot;sub\&quot;:\&quot;(.*?)\&quot;,\&quot;subp\&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SUBP_REGEX = <span class="hljs-string">&quot;\&quot;subp\&quot;:\&quot;(.*?)\&quot;&#125;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TID_GENERATE_URL = <span class="hljs-string">&quot;https://passport.weibo.com/visitor/genvisitor&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COOKIE_GENERATE_URL = <span class="hljs-string">&quot;https://passport.weibo.com/visitor/visitor&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; uaList = Arrays.asList(<br>            <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36 Edg/95.0.1020.30&quot;</span>,<br>            <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&quot;</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 构造获取 tid 请求参数</span><br>        Map&lt;String, Object&gt; fp = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        fp.put(<span class="hljs-string">&quot;os&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>);<br>        fp.put(<span class="hljs-string">&quot;browser&quot;</span>,<span class="hljs-string">&quot;Chrome,95.0.4638.54&quot;</span>);<br>        fp.put(<span class="hljs-string">&quot;fonts&quot;</span>,<span class="hljs-string">&quot;undefined&quot;</span>);<br>        fp.put(<span class="hljs-string">&quot;screenInfo&quot;</span>,<span class="hljs-string">&quot;1920*1080*24&quot;</span>);<br>        fp.put(<span class="hljs-string">&quot;plugins&quot;</span>,<span class="hljs-string">&quot;Portable Document Format::internal-pdf-viewer::PDF Viewer&quot;</span> +<br>                <span class="hljs-string">&quot;|Portable Document Format::internal-pdf-viewer::Chrome PDF Viewer&quot;</span> +<br>                <span class="hljs-string">&quot;|Portable Document Format::internal-pdf-viewer::Microsoft Edge PDF Viewer&quot;</span> +<br>                <span class="hljs-string">&quot;|Portable Document Format::internal-pdf-viewer::WebKit built-in PDF&quot;</span> +<br>                <span class="hljs-string">&quot;|Portable Document Format::internal-pdf-viewer::Chromium PDF Viewer&quot;</span>);<br><br>        Map&lt;String, Object&gt; form = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        form.put(<span class="hljs-string">&quot;cb&quot;</span>,<span class="hljs-string">&quot;gen_callback&quot;</span>);<br>        form.put(<span class="hljs-string">&quot;fp&quot;</span>,fp);<br>        String execute = HttpUtil.createPost(TID_GENERATE_URL).form(form)<br>                .header(Header.USER_AGENT, uaList.get(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">2</span>)))<br>                .execute().body();<br>        Pattern tidPattern = Pattern.compile(TID_REGEX);<br>        Matcher tidMatcher = tidPattern.matcher(execute);<br>        String tid = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (tidMatcher.find())&#123;<br>            tid = tidMatcher.group(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        params.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;incarnate&quot;</span>);<br>        params.put(<span class="hljs-string">&quot;w&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>);<br>        params.put(<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;100&quot;</span>);<br>        <span class="hljs-comment">// gc 可为空</span><br>        params.put(<span class="hljs-string">&quot;gc&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        params.put(<span class="hljs-string">&quot;cb&quot;</span>,<span class="hljs-string">&quot;cross_domain&quot;</span>);<br>        params.put(<span class="hljs-string">&quot;from&quot;</span>,<span class="hljs-string">&quot;weibo&quot;</span>);<br>        params.put(<span class="hljs-string">&quot;_rand&quot;</span>,Math.random());<br>        params.put(<span class="hljs-string">&quot;t&quot;</span>,tid);<br>        HttpResponse response = HttpUtil.createGet(COOKIE_GENERATE_URL).form(params)<br>                .header(Header.USER_AGENT, uaList.get(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">2</span>)))<br>                .execute();<br>        System.out.println(response.getCookies());<br>        System.out.println(response.body());<br><br>        Pattern subPattern = Pattern.compile(SUB_REGEX);<br>        Matcher subMatcher = subPattern.matcher(response.body());<br>        <span class="hljs-keyword">if</span> (subMatcher.find())&#123;<br>            System.out.println(<span class="hljs-string">&quot;获取到的sub : &quot;</span> + subMatcher.group(<span class="hljs-number">1</span>));<br>        &#125;<br><br>        Pattern subpPattern = Pattern.compile(SUBP_REGEX);<br>        Matcher subpMatcher = subpPattern.matcher(response.body());<br>        <span class="hljs-keyword">if</span> (subpMatcher.find())&#123;<br>            System.out.println(<span class="hljs-string">&quot;获取到的subp : &quot;</span> + subpMatcher.group(<span class="hljs-number">1</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>控制台输出：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[SRF=1635261960, SRT=D.QqHBTrsQN%219EW-RtOeYoWrSNUPvndGYQTck8Uq4o5%21EmMdbbN-WbMrMpNbHi5mYNUCsuPDbgVdkFPGMNAZSARPiaJmktTcsLSOSSO-uGNcScVdbZSbYbN%21Pjdcum4A77%2AB.vAflW-P9Rc0lR-ykKDvnJqiQVbiRVPBtS%21r3J8sQVqbgVdWiMZ4siOzu4DbmKPWFJbS3JsPpIe4kdDYZJ%21ml43EqK4kG, SUBP=0033WrSXqPxfM72-Ws9jqgMF55529P9D9WF2Vw3Ur.u-X8c2A.Sqs9KG, SUB=_2AkMWJJEwf8NxqwFRmP0XxWjkbo51zADEieKgeGDrJRMxHRl-yT9jqkFTtRB6PaS_0KxjmOe6YOnGJffqicfXeJElZnDQ]<br>window.cross_domain &amp;&amp; cross_domain(&#123;&quot;retcode&quot;:20000000,&quot;msg&quot;:&quot;succ&quot;,&quot;data&quot;:&#123;&quot;sub&quot;:&quot;_2AkMWJJEwf8NxqwFRmP0XxWjkbo51zADEieKgeGDrJRMxHRl-yT9jqkFTtRB6PaS_0KxjmOe6YOnGJffqicfXeJElZnDQ&quot;,&quot;subp&quot;:&quot;0033WrSXqPxfM72-Ws9jqgMF55529P9D9WF2Vw3Ur.u-X8c2A.Sqs9KG&quot;&#125;&#125;);<br>获取到的sub : _2AkMWJJEwf8NxqwFRmP0XxWjkbo51zADEieKgeGDrJRMxHRl-yT9jqkFTtRB6PaS_0KxjmOe6YOnGJffqicfXeJElZnDQ<br>获取到的subp : 0033WrSXqPxfM72-Ws9jqgMF55529P9D9WF2Vw3Ur.u-X8c2A.Sqs9KG<br></code></pre></div></td></tr></table></figure><blockquote><p>可以在获取cookie过程中加上代理 <a href="https://hutool.cn/docs/#/http/Http%E8%AF%B7%E6%B1%82-HttpRequest?id=%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86">Http请求-HttpRequest 配置代理</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>微博cookie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win查看端口占用并结束进程</title>
    <link href="/2021/10/21/win%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E5%B9%B6%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/"/>
    <url>/2021/10/21/win%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E5%B9%B6%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows-查看端口占用进程并关闭"><a href="#Windows-查看端口占用进程并关闭" class="headerlink" title="Windows 查看端口占用进程并关闭"></a>Windows 查看端口占用进程并关闭</h1><blockquote><p>后端开发时，有可能会碰上端口被占用的情况，我一般会选择杀掉端口占用的进程，而不选择更换端口。</p><p>因为更换端口可能会导致当前环境产生一些问题或是需要重新配置其他内容。</p></blockquote><ol><li>打开 <code>cmd</code> 命令行，输入 <code>netstat -ano|findstr &quot;端口号&quot;  </code>查看进程，比如查看<code>8080</code>端口</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">netstat -ano|findstr &quot;8080&quot;<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/zzl_java/codingzhaoOSS/raw/master/codingzhao/pictures/main/cmd-202110212257818.png" alt="image-20211021225713788"></p><ol start="2"><li>使用<code>Tasklist</code>查看对于 PID 的进程名</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tasklist|findstr &quot;PID号&quot;<br></code></pre></div></td></tr></table></figure><p>可以看到<code>java.exe</code>进程占用了该端口：</p><p><img src="https://gitee.com/zzl_java/codingzhaoOSS/raw/master/codingzhao/pictures/main/cmd-202110212257402.png" alt="image-20211021225758370"></p><ol start="3"><li>通过<code> taskkill</code> 命令方式结束进程</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">taskkill /f /t /im PID<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/zzl_java/codingzhaoOSS/raw/master/codingzhao/pictures/main/cmd-202110212259200.png" alt="image-20211021225944170"></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Druid监控踩坑</title>
    <link href="/2021/10/21/Druid%E7%9B%91%E6%8E%A7%E8%B8%A9%E5%9D%91/"/>
    <url>/2021/10/21/Druid%E7%9B%91%E6%8E%A7%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Druid监控踩坑"><a href="#Druid监控踩坑" class="headerlink" title="Druid监控踩坑"></a>Druid监控踩坑</h1><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Druid配置好初次使用监控时，打开监控的数据源界面，显示</p><p><img src="https://gitee.com/zzl_java/codingzhaoOSS/raw/master/codingzhao/pictures/main/druid-202110212247863.png" alt="image-20211021224726830">  </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">(*) property <span class="hljs-keyword">for</span> user to setup<br></code></pre></div></td></tr></table></figure><p>这个描述，只是备注信息。并不是错误提示</p><p>在项目中发送一个sql请求，连接一次数据库就可以解决。</p><p><img src="https://gitee.com/zzl_java/codingzhaoOSS/raw/master/codingzhao/pictures/main/druid-20211021.png" alt="image-20211021224245718"></p>]]></content>
    
    
    <categories>
      
      <category>Druid</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Druid</tag>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs安装及环境配置</title>
    <link href="/2021/09/28/nodejs%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/09/28/nodejs%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js安装及环境配置"><a href="#Node-js安装及环境配置" class="headerlink" title="Node.js安装及环境配置"></a>Node.js安装及环境配置</h1><blockquote><p>所有操作均在Win环境下</p></blockquote><h3 id="1、下载-Node-js-安装包，官网地址"><a href="#1、下载-Node-js-安装包，官网地址" class="headerlink" title="1、下载 Node.js 安装包，官网地址"></a>1、下载 Node.js 安装包，<a href="https://nodejs.org/zh-cn/download/">官网地址</a></h3><h3 id="2、-安装"><a href="#2、-安装" class="headerlink" title="2、 安装"></a>2、 安装</h3><p>我下载的**.msi**安装包，双击常规安装即可（nodejs已经集成npm）</p><p>安装完成后，cmd查看node以及npm版本信息</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看node版本</span><br>C:\Users\admin&gt;node -v<br>v14.17.6<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看npm版本</span><br>C:\Users\admin&gt;npm -v<br>6.14.15<br></code></pre></div></td></tr></table></figure><h3 id="3、设置全局模块时路径和缓存路径"><a href="#3、设置全局模块时路径和缓存路径" class="headerlink" title="3、设置全局模块时路径和缓存路径"></a>3、设置全局模块时路径和缓存路径</h3><p>nodejs安装目录下新建文件夹：<strong>node_global</strong>、<strong>node_cache</strong></p><p>cmd执行：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 设置全局安装路径</span><br>npm config set prefix &quot;nodejs安装路径\node_global&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置全局缓存路径</span><br>npm config set cache &quot;nodejs安装路径\node_cache&quot;<br></code></pre></div></td></tr></table></figure><h3 id="4、-测试"><a href="#4、-测试" class="headerlink" title="4、 测试"></a>4、 测试</h3><p>cmd执行：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install -g vue<br></code></pre></div></td></tr></table></figure><p>如果报错：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">C:\Users\admin&gt;npm install -g vue<br>npm ERR! code EPERM<br>npm ERR! syscall mkdir<br>npm ERR! path nodejs安装路径\node_cache\_cacache<br>npm ERR! errno -4048<br></code></pre></div></td></tr></table></figure><p>文件夹操作权限问题</p><p>直接鼠标右键点击nodejs文件夹 —&gt; 属性 —&gt;  安全 ，给当前登录用户赋权即可，然后重新执行命令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">C:\Users\admin&gt;npm install -g vue<br>+ vue@2.6.14<br>added 1 package from 1 contributor in 3.4s<br></code></pre></div></td></tr></table></figure><p>这就可以了，打开我们设置的全局安装路径，就可以看到vue的文件夹了</p><h3 id="5、环境变量设置"><a href="#5、环境变量设置" class="headerlink" title="5、环境变量设置"></a>5、环境变量设置</h3><blockquote><p>因为全局模块可以在命令行中直接调用，因此还要在环境变量中设置一下</p></blockquote><p>新建环境变量 —&gt; 系统变量 NODE_PATH ，路径为 <code>nodejs安装路径\node_global\node_modules</code></p><p>然后，修改用户变量PATH中原有npm路径，变更为  <code>nodejs安装路径\node_global </code></p><blockquote><p>由于国内访问npm官方镜像源可能会过慢，我们设置下淘宝cnpm镜像源 <a href="https://npmmirror.com/">淘宝 NPM 镜像 </a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npmmirror.com<br></code></pre></div></td></tr></table></figure><h3 id="6、测试："><a href="#6、测试：" class="headerlink" title="6、测试："></a>6、测试：</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cnpm list<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker在Win10上启动失败解决方法</title>
    <link href="/2021/09/28/Docker%E5%9C%A8Win10%E4%B8%8A%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2021/09/28/Docker%E5%9C%A8Win10%E4%B8%8A%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker在Win10上启动失败解决方法"><a href="#Docker在Win10上启动失败解决方法" class="headerlink" title="Docker在Win10上启动失败解决方法"></a>Docker在Win10上启动失败解决方法</h1><h3 id="1、报错信息"><a href="#1、报错信息" class="headerlink" title="1、报错信息"></a>1、报错信息</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Docker.ApiServices.WSL2.WslKernelUpdateNotInstalledException: 引发类型为“Docker.ApiServices.WSL2.WslKernelUpdateNotInstalledException”的异常。<br>   在 Docker.ApiServices.WSL2.WslShortLivedCommandResult.LogAndThrowIfUnexpectedExitCode(String prefix, ILogger log, Int32 expectedExitCode) 位置 C:\workspaces\PR-16360\src\github.com\docker\pinata\win\src\Docker.ApiServices\WSL2\WslCommand.cs:行号 140<br>   在 Docker.Engines.WSL2.WSL2Provisioning.&lt;DeployDistroAsync&gt;d__17.MoveNext() 位置 C:\workspaces\PR-16360\src\github.com\docker\pinata\win\src\Docker.Engines\WSL2\WSL2Provisioning.cs:行号 168<br>--- 引发异常的上一位置中堆栈跟踪的末尾 ---<br>   在 System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()<br>   在 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)<br>   在 Docker.Engines.WSL2.WSL2Provisioning.&lt;ProvisionAsync&gt;d__8.MoveNext() 位置 C:\workspaces\PR-16360\src\github.com\docker\pinata\win\src\Docker.Engines\WSL2\WSL2Provisioning.cs:行号 77<br>--- 引发异常的上一位置中堆栈跟踪的末尾 ---<br></code></pre></div></td></tr></table></figure><h3 id="2、解决办法"><a href="#2、解决办法" class="headerlink" title="2、解决办法"></a>2、解决办法</h3><p>打开网站  <a href="https://czf-net.xyz/res/">https://czf-net.xyz/res/</a></p><p>下载 <code>wsl.msi</code></p><p>安装</p><p>重启Docker解决！</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker安装mysql</title>
    <link href="/2021/09/27/Study/docker%E5%AE%89%E8%A3%85mysql/"/>
    <url>/2021/09/27/Study/docker%E5%AE%89%E8%A3%85mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker安装Mysql"><a href="#Docker安装Mysql" class="headerlink" title="Docker安装Mysql"></a>Docker安装Mysql</h1><blockquote><p>使用docker安装MySQL</p></blockquote><ul><li><h3 id="搜索MySQL镜像"><a href="#搜索MySQL镜像" class="headerlink" title="搜索MySQL镜像"></a>搜索MySQL镜像</h3></li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker search mysql<br></code></pre></div></td></tr></table></figure><ul><li><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3></li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker pull mysql<br></code></pre></div></td></tr></table></figure><p>此命令默认安装最新版本，可通过 <a href="https://hub.docker.com/">docker hub</a> 查看所有的历史版本</p><p>如 <a href="https://hub.docker.com/_/mysql">mysql</a> ：</p><img src="https://gitee.com/zzl_java/codingzhaoOSS/raw/master/codingzhao/pictures/main/docker-mysql.png" alt="image-20210927224911889" style="zoom:100%;" /><p>如安装 <a href="https://github.com/docker-library/mysql/blob/9e91c13e4147ab680e620d06fb16b505d6ea6bd1/5.7/Dockerfile.debian"><code>5.7.35</code></a>,可使用：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker pull mysql:5.7<br></code></pre></div></td></tr></table></figure><p>拉取镜像成功之后可查看本地镜像</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker images<br></code></pre></div></td></tr></table></figure><ul><li><h3 id="创建实例并运行"><a href="#创建实例并运行" class="headerlink" title="创建实例并运行"></a>创建实例并运行</h3></li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run -p 3306:3306 --name mysql -v /mydocker/mysql/conf:/etc/mysql/conf.d -v /mydocker/mysql/logs:/var/log/mysql -v /mydocker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci<br></code></pre></div></td></tr></table></figure><p><strong>命令解释说明：</strong></p><p><code> -p 3306:3306：</code>将主机的3306端口映射到docker容器的3306端口。<br><code> --name mysql：</code>运行服务名字<br><code> -v /mydocker/mysql/conf:/etc/mysql/conf.d ：</code>将主机/mydocker/mysql录下的conf/my.cnf 挂载到容器的 /etc/mysql/conf.d<br><code> -v /mydocker/mysql/logs:/var/log/mysql：</code>将主机/mydocker/mysql目录下的 logs 目录挂载到容器的 /logs。<br><code> -v /mydocker/mysql/data:/var/lib/mysql ：</code>将主机/mydocker/mysql目录下的data目录挂载到容器的 /var/lib/mysql<br><code> -e MYSQL_ROOT_PASSWORD=root：</code>初始化 root 用户的密码。<br><code>-d mysql:5.7 :</code>后台程序运行mysql5.7<br><code> --character-set-server=utf8mb4 ：</code>设置字符集<br><code> -collation-server=utf8mb4_unicode_ci：</code>设置校对集</p><ol><li>查看容器日志:</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">查看容器ID</span><br>docker ps<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 26a457b944b7为容器ID</span> <br>docker logs -f -t --tail 100 26a457b944b7<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/zzl_java/codingzhaoOSS/raw/master/codingzhao/pictures/main/docker_logs_excemple.png" alt="image-20210927231834010"></p><ol start="2"><li>进入容器内部查看</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 26a457b944b7为容器ID</span> <br>docker exec -it  26a457b944b7 /bin/bash<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/zzl_java/codingzhaoOSS/raw/master/codingzhao/pictures/main/docker_mysql_sql.png" alt="image-20210927232705848"></p><ol start="3"><li>退出容器两种方式：</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 输入：</span><br>exit  容器停止退出<br><span class="hljs-meta">#</span><span class="bash"> 键盘按键：</span><br>Ctrl+Q+P 容器不停止退出<br></code></pre></div></td></tr></table></figure><p>然后就可以使用远程连接工具连接mysql数据库了</p><p><img src="https://gitee.com/zzl_java/codingzhaoOSS/raw/master/codingzhao/pictures/main/navicat_mysql.png" alt="image-20210927233453416"></p><p>宿主机上备份数据库：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker exec 26a457b944b7 sh -c &#x27; exec mysqldump --all-databases -uroot -p&quot;root&quot; &#x27; &gt; /mydocker/mysql/all-databases.sql<br></code></pre></div></td></tr></table></figure><ul><li><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3></li></ul><p>停止容器</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker stop 容器id<br></code></pre></div></td></tr></table></figure><p>强制停止容器</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker kill 容器ID<br></code></pre></div></td></tr></table></figure><p>删除容器</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker rm  [-f] 容器ID<br></code></pre></div></td></tr></table></figure><p>删除所有容器</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker rm -f $(docker ps -a -q)<br>docker ps -a -q | xargs docker rm<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Collections常用API</title>
    <link href="/2021/09/26/JDK/Collections%E5%B8%B8%E7%94%A8API/"/>
    <url>/2021/09/26/JDK/Collections%E5%B8%B8%E7%94%A8API/</url>
    
    <content type="html"><![CDATA[<h1 id="Collections-常用API"><a href="#Collections-常用API" class="headerlink" title="Collections-常用API"></a>Collections-常用API</h1><h3 id="1、-创建一个空的集合"><a href="#1、-创建一个空的集合" class="headerlink" title="1、 创建一个空的集合"></a>1、 创建一个空的集合</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;String&gt; strList = Collections.EMPTY_LIST;<br>Map&lt;String, String&gt; strMap = Collections.EMPTY_MAP;<br>Set&lt;String&gt; strSet = Collections.EMPTY_SET;<br></code></pre></div></td></tr></table></figure><h3 id="2、快速创建一个只有一个元素的List"><a href="#2、快速创建一个只有一个元素的List" class="headerlink" title="2、快速创建一个只有一个元素的List"></a>2、快速创建一个只有一个元素的List</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;String&gt; singletonList = Collections.singletonList(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;zhangdan&quot;</span>, <span class="hljs-number">21</span>).getName());<br></code></pre></div></td></tr></table></figure><h3 id="3、集合根据属性分组"><a href="#3、集合根据属性分组" class="headerlink" title="3、集合根据属性分组"></a>3、集合根据属性分组</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">User.class:<br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String level;<br>&#125;<br><br>集合数据：<br>List&lt;User&gt; users = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;大一&quot;</span>));<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;大二&quot;</span>));<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;大三&quot;</span>));<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;大一&quot;</span>));<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">单个属性分组<br>Map&lt;String, List&lt;User&gt;&gt; listMap = users.stream().collect(Collectors.groupingBy(User::getLevel));<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">多个属性组合分组<br>Map&lt;String, List&lt;User&gt;&gt; listMap = users.stream().collect(Collectors.groupingBy(a -&gt; a.getAge() + a.getLevel()));<br></code></pre></div></td></tr></table></figure><h3 id="4、-创建一个不可修改的List"><a href="#4、-创建一个不可修改的List" class="headerlink" title="4、 创建一个不可修改的List"></a>4、 创建一个不可修改的List</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List list = Collections.unmodifiableList(singletonList);<br>list.remove(<span class="hljs-number">1</span>);<br><br>报错：<br>java.lang.UnsupportedOperationException<br>at java.util.Collections$UnmodifiableList.remove(Collections.java:<span class="hljs-number">1319</span>)<br></code></pre></div></td></tr></table></figure><h3 id="5、-取出某个值，放入到新的集合中"><a href="#5、-取出某个值，放入到新的集合中" class="headerlink" title="5、 取出某个值，放入到新的集合中"></a>5、 取出某个值，放入到新的集合中</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;String&gt; nameList = users.stream().collect(Collectors.mapping(User::getName, Collectors.toList()));<br></code></pre></div></td></tr></table></figure><h3 id="6、-其他方法"><a href="#6、-其他方法" class="headerlink" title="6、 其他方法"></a>6、 其他方法</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>list.add(<span class="hljs-number">1</span>);<br>list.add(<span class="hljs-number">4</span>);<br>list.add(<span class="hljs-number">3</span>);<br>list.add(<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// static void swap(List list, int i, int j) :将指定列表中的两个索引进行位置互换</span><br>Collections.swap(list, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// static void  sort(List&lt;T&gt; list) :按照列表中元素的自然顺序进行排序</span><br>Collections.sort(list);<br><br><span class="hljs-comment">// static void shuffle(List list) :洗牌，随机置换</span><br>Collections.shuffle(list);<br><br><span class="hljs-comment">// static void reverse(List list)  :元素反转</span><br>Collections.reverse(list);<br><br><span class="hljs-comment">// static int  binarySearch(List list, Object key) 使用二分查找法查找指定元素在指定列表的索引位置</span><br><span class="hljs-keyword">int</span> index = Collections.binarySearch(list, <span class="hljs-number">4</span>);<br><br><span class="hljs-comment">// static void fill(List list, Object obj) :使用指定的对象填充指定列表的所有元素</span><br>Collections.fill(list, <span class="hljs-number">5</span>);<br><br><span class="hljs-comment">// static void copy(List dest, List src) :是把源列表中的数据覆盖到目标列表</span><br><span class="hljs-comment">// 注意：目标列表的长度至少等于源列表的长度</span><br><span class="hljs-comment">// 创建源列表</span><br>List&lt;String&gt; src = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>src.add(<span class="hljs-string">&quot;src_1&quot;</span>);<br>src.add(<span class="hljs-string">&quot;src_2&quot;</span>);<br>src.add(<span class="hljs-string">&quot;src_3&quot;</span>);<br><br><span class="hljs-comment">// 创建目标列表</span><br>List&lt;String&gt; dest = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>dest.add(<span class="hljs-string">&quot;dest_1&quot;</span>);<br>dest.add(<span class="hljs-string">&quot;dest_2&quot;</span>);<br>dest.add(<span class="hljs-string">&quot;dest_3&quot;</span>);<br>dest.add(<span class="hljs-string">&quot;dest_4&quot;</span>);<br>Collections.copy(dest, src);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
      <tag>Collections</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stream常用API</title>
    <link href="/2021/09/26/JDK/Stream%E5%B8%B8%E7%94%A8API/"/>
    <url>/2021/09/26/JDK/Stream%E5%B8%B8%E7%94%A8API/</url>
    
    <content type="html"><![CDATA[<h1 id="Stream-常用API"><a href="#Stream-常用API" class="headerlink" title="Stream-常用API"></a>Stream-常用API</h1><h2 id="1、joining"><a href="#1、joining" class="headerlink" title="1、joining"></a>1、joining</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;v&quot;</span>);<br>String str = strings.stream().collect(Collectors.joining(<span class="hljs-string">&quot;,&quot;</span>));<br></code></pre></div></td></tr></table></figure><h2 id="2、reduce"><a href="#2、reduce" class="headerlink" title="2、reduce"></a>2、reduce</h2><h6 id="List-lt-Integer-gt-：integers"><a href="#List-lt-Integer-gt-：integers" class="headerlink" title="List&lt;Integer&gt;：integers"></a>List&lt;Integer&gt;：integers</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;Integer&gt; integers = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>);<br></code></pre></div></td></tr></table></figure><ul><li>一个参数</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">Optional&lt;T&gt; <span class="hljs-title">reduce</span><span class="hljs-params">(BinaryOperator&lt;T&gt; accumulator)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">最大值<br>Integer max = integers.stream().reduce((a, b) -&gt; a &gt;= b ? a : b).get();<br><br>最小值<br>Integer min = integers.stream().reduce((a, b) -&gt; a &lt;= b ? a : b).get();<br><br>求和<br>Integer sum = integers.stream().reduce((a, b) -&gt; a + b).get();<br></code></pre></div></td></tr></table></figure><ul><li>两个参数</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">T <span class="hljs-title">reduce</span><span class="hljs-params">(T identity, BinaryOperator&lt;T&gt; accumulator)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">在初始化值的基础上求和<br>Integer reduce = integers.stream().reduce(<span class="hljs-number">0</span>, (integer, integer2) -&gt; integer + integer2);<br><br>字符串拼接<br>String reduced = Stream.of(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>).reduce(<span class="hljs-string">&quot;Prefix&quot;</span>, (a, b) -&gt; a.concat(b));<br></code></pre></div></td></tr></table></figure><ul><li>三个参数</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;U&gt; <span class="hljs-function">U <span class="hljs-title">reduce</span><span class="hljs-params">(U identity,</span></span><br><span class="hljs-params"><span class="hljs-function">    BiFunction&lt;U, ? <span class="hljs-keyword">super</span> T, U&gt; accumulator,</span></span><br><span class="hljs-params"><span class="hljs-function">    BinaryOperator&lt;U&gt; combiner)</span></span>;<br><br>identity: 一个初始化的值；这个初始化的值其类型是泛型U，与Reduce方法返回的类型一致<br>accumulator: 类型是BiFunction，输入是U与T两个类型的数据，而返回的是U类型；也就是说返回的类型与输入的第一个参数类型是一样的，而输入的第二个参数类型与Stream中元素类型是一样的<br>combiner: 类型是BinaryOperator，支持的是对U类型的对象进行操作<br>    <br>注意：combiner 在非并行流中并不生效<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Integer reduce1 = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>).reduce(<span class="hljs-number">4</span>, (a, b) -&gt; a + b, (a, b) -&gt; a * b);<br></code></pre></div></td></tr></table></figure><p>输出结果为 10 </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Integer reduce2 = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>).parallel().reduce(<span class="hljs-number">4</span>, (a, b) -&gt; a + b, (a, b) -&gt; a * b);<br></code></pre></div></td></tr></table></figure><p>输出结果为210</p><p>分析：非并行流中执行操作：</p><p><strong>accumulator：</strong><br>4 + 1 = 5<br>5 + 2 = 7<br>7 + 3 = 10</p><p>并行流中执行操作：</p><p><strong>accumulator：</strong><br>4 + 1 = 5<br>4 + 2 = 6<br>4 + 3 = 7</p><p><strong>combiner：</strong><br>5 * 6 = 30<br>30 * 7 = 210</p><h2 id="3、sorted"><a href="#3、sorted" class="headerlink" title="3、sorted"></a>3、sorted</h2><h6 id="Bean：User"><a href="#Bean：User" class="headerlink" title="Bean：User"></a>Bean：User</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">User.class:<br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String level;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="List-lt-User-gt-：users"><a href="#List-lt-User-gt-：users" class="headerlink" title="List&lt;User&gt;：users"></a>List&lt;User&gt;：users</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;User&gt; users = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&quot;D&quot;</span>));<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&quot;C&quot;</span>));<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">19</span>,  <span class="hljs-string">&quot;A&quot;</span>));<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">22</span>,  <span class="hljs-string">&quot;B&quot;</span>));<br></code></pre></div></td></tr></table></figure><ul><li>升序</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;User&gt; sortedUserList = users.stream().sorted(Comparator.comparing(User::getAge)).collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure><ul><li>降序</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;User&gt; sortedUserList = users.stream().sorted(Comparator.comparing(User::getAge).reversed()).collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure><ul><li>多字段升序</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;User&gt; sortedUserList = users.stream().sorted(Comparator.comparing(User::getAge).thenComparing(User::getLevel)).collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure><ul><li>多字段降序</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;User&gt; sortedUserList = users.stream().sorted(Comparator.comparing(User::getAge).thenComparing(User::getLevel).reversed()).collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
      <tag>Stream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 安装Docker</title>
    <link href="/2021/09/19/Study/centOS%E5%AE%89%E8%A3%85Docker/"/>
    <url>/2021/09/19/Study/centOS%E5%AE%89%E8%A3%85Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="CentOS-安装Docker"><a href="#CentOS-安装Docker" class="headerlink" title="CentOS 安装Docker"></a>CentOS 安装Docker</h1><blockquote><p>官方参考地址：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a><br>国外的Docker镜像很慢，本文基于阿里云镜像</p></blockquote><h2 id="1-卸载旧版本"><a href="#1-卸载旧版本" class="headerlink" title="1. 卸载旧版本"></a>1. 卸载旧版本</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum remove docker \<br>                docker-client \<br>                docker-client-latest \<br>                docker-common \<br>                docker-latest \<br>                docker-latest-logrotate \<br>                docker-logrotate \<br>                docker-engine<br></code></pre></div></td></tr></table></figure><h2 id="2-安装Docker"><a href="#2-安装Docker" class="headerlink" title="2. 安装Docker"></a>2. 安装Docker</h2><ol><li>安装之前我们先安装下<code>yum-utils</code>，为了通过 <code>yum-config-manager</code> 命令来设置 镜像仓库地址</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install yum-utils<br></code></pre></div></td></tr></table></figure><ol start="2"><li>设置镜像仓库地址</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></div></td></tr></table></figure><ol start="3"><li>安装 docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install docker-ce docker-ce-cli containerd.io<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>如果报错：</strong><font color=#FF0000>  <code>No match for argument: containerd.io</code></font>  ，<strong>如无报错请忽略此步</strong></p><p><strong>原因：</strong><code>centos8默认使用podman代替docker，所以需要containerd.io，就安装一下就好了</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/containerd.io-1.4.9-3.1.el7.x86_64.rpm<br></code></pre></div></td></tr></table></figure></blockquote><ol start="4"><li>继续安装docker</li></ol><blockquote><p>如步骤3无报错请忽略此步，直接进行步骤5</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install docker-ce docker-ce-cli containerd.io<br></code></pre></div></td></tr></table></figure><ol start="5"><li>启动docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl start docker.service<br></code></pre></div></td></tr></table></figure><ol start="6"><li>设置docker开机自启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl enable docker.service<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下JDK（JAVA环境）安装</title>
    <link href="/2020/09/19/Study/Linux%E4%B8%8BJDK%EF%BC%88JAVA%E7%8E%AF%E5%A2%83%EF%BC%89%E5%AE%89%E8%A3%85/"/>
    <url>/2020/09/19/Study/Linux%E4%B8%8BJDK%EF%BC%88JAVA%E7%8E%AF%E5%A2%83%EF%BC%89%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux下JDK（JAVA环境）安装"><a href="#Linux下JDK（JAVA环境）安装" class="headerlink" title="Linux下JDK（JAVA环境）安装"></a>Linux下JDK（JAVA环境）安装</h1><blockquote><p>注意：这⾥安装的是Oracle JDK</p></blockquote><h2 id="准备JDK安装包"><a href="#准备JDK安装包" class="headerlink" title="准备JDK安装包"></a>准备JDK安装包</h2><p>我这⾥下载的是 <a href="https://download.oracle.com/otn/java/jdk/8u261-b12/a4634525489241b9a9e1aa73d9e118e6/jdk-8u261-linux-x64.tar.gz?AuthParam=1597465946_ba6eb0f7d55bd39c9a0d166c39dbceda">jdk-8u261-linux-i586.tar.gz</a>，安装包，并将其直接放在了 <code>root</code> 目录下</p><h3 id="1-卸载已有的OPENJDK（如果有"><a href="#1-卸载已有的OPENJDK（如果有" class="headerlink" title="1. 卸载已有的OPENJDK（如果有)"></a>1. 卸载已有的OPENJDK（如果有)</h3><p>如果系统⾃带有 <code>OpenJDK</code> ，可以按照如下步骤提前卸载之。</p><p>⾸先查找已经安装的 <code>OpenJDK</code> 包：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -qa | grep java<br></code></pre></div></td></tr></table></figure><p>如果有就将 java 开头的安装包均卸载即可:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum -y remove java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64<br>yum -y remove java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64<br><br>... 省略 ...<br></code></pre></div></td></tr></table></figure><p>我这里没有，就可以直接下一步</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@iZbp19oigcst5l5m3e6pdfZ ~]# rpm -qa | grep java<br>[root@iZbp19oigcst5l5m3e6pdfZ ~]# <br></code></pre></div></td></tr></table></figure><h3 id="2-创建⽬录并解压"><a href="#2-创建⽬录并解压" class="headerlink" title="2. 创建⽬录并解压"></a>2. 创建⽬录并解压</h3><p>1、在<code> /usr/local/</code> 下创建 <code>java</code> ⽂件夹并进⼊</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /usr/local/<br>mkdir java<br>cd java<br></code></pre></div></td></tr></table></figure><ol start="2"><li>将上⾯准备好的 JDK 安装包解压到 <code>/usr/local/java</code> 中即可</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar -zxvf /root/jdk-8u261-linux-x64.tar.gz -C ./<br></code></pre></div></td></tr></table></figure><p>解压完之后，<code> /usr/local/java</code> ⽬录中会出现⼀个 <code>jdk1.8.0_261</code> 的⽬录</p><h3 id="3-配置JDK环境变量"><a href="#3-配置JDK环境变量" class="headerlink" title="3. 配置JDK环境变量"></a>3. 配置JDK环境变量</h3><p>编辑 <code>/etc/profile</code> ⽂件，在⽂件尾部加⼊如下 <code>JDK</code> 环境配置即可</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">JAVA_HOME=/usr/local/java/jdk1.8.0_261<br>CLASSPATH=$JAVA_HOME/lib/<br>PATH=$PATH:$JAVA_HOME/bin<br>export PATH JAVA_HOME CLASSPATH<br></code></pre></div></td></tr></table></figure><p>然后执⾏如下命令让环境变量⽣效</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source /etc/profile<br></code></pre></div></td></tr></table></figure><h3 id="4-验证JDK安装结果"><a href="#4-验证JDK安装结果" class="headerlink" title="4. 验证JDK安装结果"></a>4. 验证JDK安装结果</h3><p>输⼊如下命令即可检查安装结果：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">java -version<br><br>javac<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
