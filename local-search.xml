<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用PicGo + 码云 搭建属于自己的图床</title>
    <link href="/2020/05/24/PicGo/"/>
    <url>/2020/05/24/PicGo/</url>
    
    <content type="html"><![CDATA[<h1 id="使用PicGo-码云-搭建属于自己的图床"><a href="#使用PicGo-码云-搭建属于自己的图床" class="headerlink" title="使用PicGo + 码云 搭建属于自己的图床"></a>使用PicGo + 码云 搭建属于自己的图床</h1><blockquote><p>七牛云图床虽然好用但是需要以备案的域名，正在用的途中赠送的域名失效，不得已转战 <code>PicGo + 码云</code></p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><ul><li><p>PicGo</p><p><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo作者GitHub地址</a></p></li><li><p>picgo-plugin-gitee-uploader插件</p></li></ul><h3 id="2-插件"><a href="#2-插件" class="headerlink" title="2. 插件"></a>2. 插件</h3><p>打开PicGo，选择最底下的插件设置，搜索gitee</p><p><img src="https://gitee.com/zzl_java/PicGo/raw/master/img/20200815134254.png" srcset="/img/loading.gif" alt="image-20200815134254521"></p><p>两个其实都可以使用，这里我们安装第二个。</p><h3 id="3-建立gitee（码云）图床库"><a href="#3-建立gitee（码云）图床库" class="headerlink" title="3. 建立gitee（码云）图床库"></a>3. 建立gitee（码云）图床库</h3><h4 id="3-1-新建仓库"><a href="#3-1-新建仓库" class="headerlink" title="3.1 新建仓库"></a>3.1 新建仓库</h4><ul><li>输入一个仓库名称</li><li>其次将仓库设为公开</li><li>勾选使用Readme文件初始化这个仓库</li></ul><p><img src="https://gitee.com/zzl_java/PicGo/raw/master/img/20200815135437.png" srcset="/img/loading.gif" alt="image-20200815135437430"></p><h4 id="3-2-配置PicGo"><a href="#3-2-配置PicGo" class="headerlink" title="3.2 配置PicGo"></a>3.2 配置PicGo</h4><p>选择图床设置—&gt;gitee</p><p><img src="https://gitee.com/zzl_java/PicGo/raw/master/img/20200815134844.png" srcset="/img/loading.gif" alt="image-20200815134844543"></p><ul><li>repo：用户名/仓库名称，比如我自己的仓库zzl_java/MyPicGo，也可以直接复制仓库的url</li><li>branch：分支，这里写上master</li><li>token：填入码云的私人令牌</li><li>path：路径，一般写上img</li><li>customPath：提交消息，这一项和下一项customURL都不用填。在提交到码云后，会显示提交消息，插件默认提交的是 <code>Upload 图片名 by picGo - 时间</code></li></ul><p>这几个参数主要就是token的获取。其他的按照刚刚建的仓库填写就好。</p><h4 id="3-3-获取token"><a href="#3-3-获取token" class="headerlink" title="3.3 获取token"></a>3.3 获取token</h4><ul><li>登录进自己的码云，点击头像，进入设置</li><li>找到左面安全设置的私人令牌</li></ul><p><img src="https://gitee.com/zzl_java/PicGo/raw/master/img/20200815135306.png" srcset="/img/loading.gif" alt="image-20200815135306824"></p><ul><li>点击生成新令牌，把projects这一项勾上，其他的不用勾，然后提交</li></ul><p><img src="https://gitee.com/zzl_java/PicGo/raw/master/img/20200815135226.png" srcset="/img/loading.gif" alt="image-20200815135226150"></p><ul><li>生成令牌后把令牌复制后粘贴到token中，这个token会在离开本页的时候不再显示。然后保存设置，并把这个设置为默认图床</li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PicGo</tag>
      
      <tag>Gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下JDK（JAVA环境）安装</title>
    <link href="/2020/05/24/Linux%E4%B8%8BJDK%EF%BC%88JAVA%E7%8E%AF%E5%A2%83%EF%BC%89%E5%AE%89%E8%A3%85/"/>
    <url>/2020/05/24/Linux%E4%B8%8BJDK%EF%BC%88JAVA%E7%8E%AF%E5%A2%83%EF%BC%89%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="JDK（JAVA环境）安装"><a href="#JDK（JAVA环境）安装" class="headerlink" title="JDK（JAVA环境）安装"></a>JDK（JAVA环境）安装</h1><blockquote><p>注意：这⾥安装的是Oracle JDK</p></blockquote><h2 id="准备JDK安装包"><a href="#准备JDK安装包" class="headerlink" title="准备JDK安装包"></a>准备JDK安装包</h2><p>我这⾥下载的是 <a href="https://download.oracle.com/otn/java/jdk/8u261-b12/a4634525489241b9a9e1aa73d9e118e6/jdk-8u261-linux-x64.tar.gz?AuthParam=1597465946_ba6eb0f7d55bd39c9a0d166c39dbceda" target="_blank" rel="noopener">jdk-8u261-linux-i586.tar.gz</a>，安装包，并将其直接放在了 <code>root</code> 目录下</p><h3 id="1-卸载已有的OPENJDK（如果有"><a href="#1-卸载已有的OPENJDK（如果有" class="headerlink" title="1. 卸载已有的OPENJDK（如果有)"></a>1. 卸载已有的OPENJDK（如果有)</h3><p>如果系统⾃带有 <code>OpenJDK</code> ，可以按照如下步骤提前卸载之。</p><p>⾸先查找已经安装的 <code>OpenJDK</code> 包：</p><pre><code class="hljs shell">rpm -qa | grep java</code></pre><p>如果有就将 java 开头的安装包均卸载即可:</p><pre><code class="hljs shell">yum -y remove java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64yum -y remove java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64... 省略 ...</code></pre><p>我这里没有，就可以直接下一步</p><pre><code class="hljs shell">[root@iZbp19oigcst5l5m3e6pdfZ ~]# rpm -qa | grep java[root@iZbp19oigcst5l5m3e6pdfZ ~]#</code></pre><h3 id="2-创建⽬录并解压"><a href="#2-创建⽬录并解压" class="headerlink" title="2. 创建⽬录并解压"></a>2. 创建⽬录并解压</h3><p>1、在<code>/usr/local/</code> 下创建 <code>java</code> ⽂件夹并进⼊</p><pre><code class="hljs shell">cd /usr/local/mkdir javacd java</code></pre><ol start="2"><li>将上⾯准备好的 JDK 安装包解压到 <code>/usr/local/java</code> 中即可</li></ol><pre><code class="hljs shell">tar -zxvf /root/jdk-8u261-linux-x64.tar.gz -C ./</code></pre><p>解压完之后，<code>/usr/local/java</code> ⽬录中会出现⼀个 <code>jdk1.8.0_261</code> 的⽬录</p><h3 id="3-配置JDK环境变量"><a href="#3-配置JDK环境变量" class="headerlink" title="3. 配置JDK环境变量"></a>3. 配置JDK环境变量</h3><p>编辑 <code>/etc/profile</code> ⽂件，在⽂件尾部加⼊如下 <code>JDK</code> 环境配置即可</p><pre><code class="hljs shell">JAVA_HOME=/usr/local/java/jdk1.8.0_261CLASSPATH=$JAVA_HOME/lib/PATH=$PATH:$JAVA_HOME/binexport PATH JAVA_HOME CLASSPATH</code></pre><p>然后执⾏如下命令让环境变量⽣效</p><pre><code class="hljs shell">source /etc/profile</code></pre><h3 id="4-验证JDK安装结果"><a href="#4-验证JDK安装结果" class="headerlink" title="4. 验证JDK安装结果"></a>4. 验证JDK安装结果</h3><p>输⼊如下命令即可检查安装结果：</p><pre><code class="hljs shell">java -versionjavac</code></pre><p><img src="https://gitee.com/zzl_java/PicGo/raw/master/img/20200815135617.png" srcset="/img/loading.gif" alt="image-20200815135617909"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V2ray</title>
    <link href="/2020/03/25/V2ray/"/>
    <url>/2020/03/25/V2ray/</url>
    
    <content type="html"><![CDATA[<h1 id="V2ray"><a href="#V2ray" class="headerlink" title="V2ray"></a>V2ray</h1><h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><p><code>bash &lt;(curl -s -L https://git.io/v2ray.sh)</code><br>ubuntu/debian 系统安装 Curl 方法: <code>apt-get update -y &amp;&amp; apt-get install curl -y</code><br>centos 系统安装 Curl 方法: <code>yum update -y &amp;&amp; yum install curl -y</code><br>安装完成后，输入<code>v2ray</code> 即可管理 V2Ray</p><h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><p><code>v2ray info</code> 查看 V2Ray 配置信息<br><code>v2ray config</code> 修改 V2Ray 配置<br><code>v2ray link</code> 生成 V2Ray 配置文件链接<br><code>v2ray infolink</code> 生成 V2Ray 配置信息链接<br><code>v2ray qr</code> 生成 V2Ray 配置二维码链接<br><code>v2ray ss</code> 修改 Shadowsocks 配置<br><code>v2ray ssinfo</code> 查看 Shadowsocks 配置信息<br><code>v2ray ssqr</code> 生成 Shadowsocks 配置二维码链接<br><code>v2ray status</code> 查看 V2Ray 运行状态<br><code>v2ray start</code> 启动 V2Ray<br><code>v2ray stop</code> 停止 V2Ray<br><code>v2ray restart</code> 重启 V2Ray<br><code>v2ray log</code> 查看 V2Ray 运行日志<br><code>v2ray update</code> 更新 V2Ray<br><code>v2ray update.sh</code> 更新 V2Ray 管理脚本<br><code>v2ray uninstall</code> 卸载 V2Ray</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>V2Ray 配置文件路径：<code>/etc/v2ray/config.json</code><br>Caddy 配置文件路径：<code>/etc/caddy/Caddyfile</code><br>脚本配置文件路径:<code>/etc/v2ray/233blog_v2ray_backup.conf</code></p><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p><code>V2Ray： https://www.v2ray.com/</code><br><code>233boy: https://github.com/233boy/v2ray</code></p>]]></content>
    
    
    <categories>
      
      <category>V2ray</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git总结</title>
    <link href="/2020/03/24/Git%E6%80%BB%E7%BB%93/"/>
    <url>/2020/03/24/Git%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Git学习总结"><a href="#Git学习总结" class="headerlink" title="Git学习总结"></a>Git学习总结</h1><ul><li><h3 id="本地操作流程"><a href="#本地操作流程" class="headerlink" title="本地操作流程"></a>本地操作流程</h3></li><li><p>工作区（WorkingDirectory）</p><ul><li>添加、编辑、修改文件等操作</li></ul></li><li><p>暂存区</p><ul><li>暂存已经修改的文件，最后统一提交到Git仓库 </li></ul></li><li><p>Git Repository（Git 仓库）</p><ul><li>最终确定的文件保存仓库，成为一个人新的版本，并且对他人可见</li></ul></li></ul><hr><p>常用指令 ：git add 、git commit 、git status</p><pre><code>工作区 ---git add ---&gt;  暂存区 ---git commit---&gt;Git仓库 </code></pre><hr><ul><li><h3 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h3></li><li><p>安装好之后进行全局配置</p><pre><code class="hljs routeros"><span class="hljs-variable">$git</span><span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">"username"</span><span class="hljs-variable">$git</span><span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">"email"</span></code></pre></li><li><p>选择文件夹进行Git初始化(告诉Git管理此目录)</p><pre><code class="hljs ebnf"><span class="hljs-attribute">git init</span></code></pre><pre><code>.git隐藏文件夹不能随意更改内容</code></pre></li><li><h5 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h5></li><li><p>git status<br>  查看当前可进行的操作</p></li><li><p>git add</p><pre><code class="hljs routeros">1.git <span class="hljs-builtin-name">add</span>  文件名2.git <span class="hljs-builtin-name">add</span>  文件名1  文件名2  文件名3  <span class="hljs-built_in">..</span>.3.git <span class="hljs-builtin-name">add</span>  .【添加当前目录到缓存区】</code></pre></li><li><p>git commit</p><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">"注释"</span></code></pre></li><li><h5 id="Git指令"><a href="#Git指令" class="headerlink" title="Git指令"></a>Git指令</h5></li><li><p>查看版本<br>  1.<code>git log</code><br>  显示Git操作日志</p><p>  2.<code>git log --pretty=oneline</code><br>  时间+操作    显示</p></li><li><p>回退操作<br>  <strong>git reset –hard 版本号</strong><br>【回到过去之后，再回到未来，则需要使用指令去查看历史操作，以得到未来的commit id】</p></li><li><p><code>git reflog</code></p></li></ul><hr><ul><li><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3></li><li><h5 id="两种常规使用方式"><a href="#两种常规使用方式" class="headerlink" title="两种常规使用方式"></a>两种常规使用方式</h5></li><li>Use HTTPS<br>  使用clone指令克隆线上仓库到本地<pre><code>`git clone 线上仓库地址`</code></pre>  在仓库上做对应的操作（提交暂存区、提交本地仓库、提交线上仓库、拉取线上仓库）<br>  提交到线上仓库指令：<code>git push</code><pre><code>首次线上仓库提交需要授权版本过低则需要修改.git目录中的config文        件，在remote中的url栗的github.com           前面加上`username:password@`</code></pre>  拉取线上仓库到本地指令：<code>git pull</code></li><li><h6 id="每天上班前第一件事-git-pull-拉取最新到本地"><a href="#每天上班前第一件事-git-pull-拉取最新到本地" class="headerlink" title="每天上班前第一件事 git pull 拉取最新到本地"></a>每天上班前第一件事 git pull 拉取最新到本地</h6></li><li><h6 id="每天下班最后一件事git-push提交最新到线上"><a href="#每天下班最后一件事git-push提交最新到线上" class="headerlink" title="每天下班最后一件事git push提交最新到线上"></a>每天下班最后一件事git push提交最新到线上</h6></li><li>Use SSH（鉴权方式不同）（比较容易）<ul><li>创建公私钥对（openssh）</li><li><code>ssh-keygen -t rsa -c &quot;email&quot;</code></li><li>三回车</li><li>上传公钥到Github</li><li>后续操作与HTTPS 相同</li></ul></li></ul><hr><ul><li><h3 id="分支相关"><a href="#分支相关" class="headerlink" title="分支相关"></a>分支相关</h3></li><li><p>查看分支：<code>git branch</code></p></li><li><p>创建分支：<code>git branch 分支名</code></p></li><li><p>切换分支：<code>git checkout 分支名</code></p><ul><li>对于新分支，可以使用<code>git checkout -b</code> 分支名指令来切换分支，-b表示创建并切换，相当于两个指令</li></ul></li><li><p>删除分支：<code>git branch -d 分支名</code></p></li><li><p>合并分支：<code>git merge 被合并的分支名</code></p></li><li><h3 id="冲突的产生与解决"><a href="#冲突的产生与解决" class="headerlink" title="冲突的产生与解决"></a>冲突的产生与解决</h3></li><li><p>先pull到本地</p></li><li><p>然后解决冲突</p></li><li><p>重新push</p></li><li><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>忽略文件需要新建一个名为<code>.gitignore</code>的文件，用于声明忽略文件或者不忽略文件规则，规则对当前目录及其子目录生效<br>  该文件没有文件名，只能听过命令行<code>Git bash</code>来        <code>touch</code>创建</p></li></ul><p>1.<code>/文件夹名字/</code>过滤整个文件夹<br>2.<code>*.zip</code>过滤所有.zip文件<br>3.<code>/文件夹名字/do.c</code>过滤某个具体文件<br>4.<code>!index.php</code>不过滤某个具体文件</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“踩坑”之旅</title>
    <link href="/2020/03/24/%E8%B8%A9%E5%9D%91/"/>
    <url>/2020/03/24/%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="“踩坑”告一段落"><a href="#“踩坑”告一段落" class="headerlink" title="“踩坑”告一段落"></a>“踩坑”告一段落</h1><ul><li>找到了喜欢的主题</li><li>踩坑也算完成吧</li><li>主题可玩性感觉还可以</li><li>修改很便捷</li><li>添加”tags“和”categories“，费了不少力气</li><li>接下来就是努力</li><li>加油！！！</li></ul>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Github+HEXO (win)</title>
    <link href="/2020/03/24/github+hexo/"/>
    <url>/2020/03/24/github+hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="Github-HEXO-win"><a href="#Github-HEXO-win" class="headerlink" title="Github+HEXO (win)"></a>Github+HEXO (win)</h1><ul><li><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4></li><li><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4></li><li><h4 id="本地创建Hexo存储文件夹"><a href="#本地创建Hexo存储文件夹" class="headerlink" title="本地创建Hexo存储文件夹"></a>本地创建Hexo存储文件夹</h4></li><li><h4 id="文件夹内CMD"><a href="#文件夹内CMD" class="headerlink" title="文件夹内CMD"></a>文件夹内CMD</h4><ul><li>可通过cmd命令移动到文件夹，也可以在文件夹地址栏直接输入cmd</li></ul></li><li><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g hexo-cli3</code></pre></li></ul><p>安装完成，可能会有WARN，但不会影响正常使用</p><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo <span class="hljs-comment">--save</span></code></pre><p>Hexo安装完成，检测是否正确安装</p><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo -v</span></code></pre><ul><li><h4 id="Hexo的配置"><a href="#Hexo的配置" class="headerlink" title="Hexo的配置"></a>Hexo的配置</h4></li><li><p>在当前目录下新建一个名为blog的文件夹，用于存放博客网站的信息<br>命令行进入blog，初始化该文件夹，并安装所需组件</p><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">init </span><span class="hljs-attr">npm</span> <span class="hljs-string">install</span></code></pre></li><li><p>安装完成后，检测是否安装成功</p><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><span class="hljs-attr">hexo</span> <span class="hljs-string">s</span></code></pre></li><li><p>根据提示访问<a href="http://localhost:4000/(注意http不是https)" target="_blank" rel="noopener">http://localhost:4000/(注意http不是https)</a></p></li><li><h4 id="将GitHub-Page与Hexo关联"><a href="#将GitHub-Page与Hexo关联" class="headerlink" title="将GitHub Page与Hexo关联"></a>将GitHub Page与Hexo关联</h4></li><li><p>配置Git个人信息<br>这一步骤是为了以后我们用git命令提交不再需要繁琐的输入我们的Github帐号和密码。</p></li><li><p>在blog 目录下，执行下列命令配置你的用户名</p><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">"username"</span>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">"emailm"</span>git <span class="hljs-keyword">config</span> --list  <span class="hljs-comment">//查看用户信息</span></code></pre></li><li><p>生成秘钥</p><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">"email"</span></code></pre></li><li><p>生成文件默认路径</p><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\z</span>zl<span class="hljs-symbol">\.</span>ssh</code></pre></li><li><p>输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent</p><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> <span class="hljs-string">"<span class="hljs-variable">$(ssh-agent -s)</span>"</span></code></pre></li><li><p>再次输入命令</p><pre><code class="hljs dockerfile">ssh-<span class="hljs-keyword">add</span><span class="bash"> ~/.ssh/id_rsa</span></code></pre></li><li><p>添加帐号SSH Keys<br>   登录Github，点击头像下的settings，添加ssh</p></li><li><p>输入下列命令进行验证是否成功</p><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com</code></pre></li></ul><p>接下来Hexo踩坑开始！！！</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm使用国内镜像，解决卡顿</title>
    <link href="/2020/03/24/nodejs%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90/"/>
    <url>/2020/03/24/nodejs%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="npm-使用国内镜像，解决卡顿"><a href="#npm-使用国内镜像，解决卡顿" class="headerlink" title="npm 使用国内镜像，解决卡顿"></a>npm 使用国内镜像，解决卡顿</h1><ul><li>换成阿里源</li><li>git 执行<pre><code class="hljs arduino">npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">set</span> registry https:<span class="hljs-comment">//registry.npm.taobao.org</span></code></pre></li><li>验证命令</li></ul><pre><code class="hljs arduino">npm <span class="hljs-built_in">config</span> <span class="hljs-built_in">get</span> registry  <span class="hljs-comment">//返回https://registry.npm.taobao.org，说明镜像配置成功。</span></code></pre><ul><li>安装cnpm<pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g cnpm --registry=https://registry.<span class="hljs-built_in">npm</span>.taobao.org</code></pre>OK！！！</li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK环境配置</title>
    <link href="/2020/03/24/Java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/03/24/Java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="JDK环境"><a href="#JDK环境" class="headerlink" title="JDK环境"></a>JDK环境</h1><ul><li><p>从<code>https://www.oracle.com/java/technologies/javase-jdk8-downloads.html</code>下载JDK安装包</p></li><li><p>安装下载的JDK</p></li><li><p>环境变量配置：</p><ul><li>新建环境变量，变量名：“JAVA_HOME”，变量值：自己的JDK安装根目录（到JDK文件夹）</li></ul></li><li><p>PATH新增</p><ul><li><code>%JAVA_HOME%\bin</code></li></ul></li><li><p>JDK1.5之后不必配置CLASS_PATH，因为：在java1.5之后，把当前目录（运行 java.class 时所在目录）当做了classpath路径，而编译后的.class文件和.java文件在同一目录下，所以不需要配置</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
