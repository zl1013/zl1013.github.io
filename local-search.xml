<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Collections常用API</title>
    <link href="/2021/09/26/Collections%E5%B8%B8%E7%94%A8API/"/>
    <url>/2021/09/26/Collections%E5%B8%B8%E7%94%A8API/</url>
    
    <content type="html"><![CDATA[<h1 id="Collections-常用API"><a href="#Collections-常用API" class="headerlink" title="Collections-常用API"></a>Collections-常用API</h1><h5 id="1、-创建一个空的集合"><a href="#1、-创建一个空的集合" class="headerlink" title="1、 创建一个空的集合"></a>1、 创建一个空的集合</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;String&gt; strList = Collections.EMPTY_LIST;<br>Map&lt;String, String&gt; strMap = Collections.EMPTY_MAP;<br>Set&lt;String&gt; strSet = Collections.EMPTY_SET;<br></code></pre></div></td></tr></table></figure><h5 id="2、快速创建一个只有一个元素的List"><a href="#2、快速创建一个只有一个元素的List" class="headerlink" title="2、快速创建一个只有一个元素的List"></a>2、快速创建一个只有一个元素的List</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;String&gt; singletonList = Collections.singletonList(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;zhangdan&quot;</span>, <span class="hljs-number">21</span>).getName());<br></code></pre></div></td></tr></table></figure><h5 id="3、集合根据属性分组"><a href="#3、集合根据属性分组" class="headerlink" title="3、集合根据属性分组"></a>3、集合根据属性分组</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">User.class:<br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String level;<br>&#125;<br><br>集合数据：<br>List&lt;User&gt; users = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;大一&quot;</span>));<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;大二&quot;</span>));<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;大三&quot;</span>));<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;大一&quot;</span>));<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">单个属性分组<br>Map&lt;String, List&lt;User&gt;&gt; listMap = users.stream().collect(Collectors.groupingBy(User::getLevel));<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">多个属性组合分组<br>Map&lt;String, List&lt;User&gt;&gt; listMap = users.stream().collect(Collectors.groupingBy(a -&gt; a.getAge() + a.getLevel()));<br></code></pre></div></td></tr></table></figure><h5 id="4、-创建一个不可修改的List"><a href="#4、-创建一个不可修改的List" class="headerlink" title="4、 创建一个不可修改的List"></a>4、 创建一个不可修改的List</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List list = Collections.unmodifiableList(singletonList);<br>list.remove(<span class="hljs-number">1</span>);<br><br>报错：<br>java.lang.UnsupportedOperationException<br>at java.util.Collections$UnmodifiableList.remove(Collections.java:<span class="hljs-number">1319</span>)<br></code></pre></div></td></tr></table></figure><h5 id="5、-取出某个值，放入到新的集合中"><a href="#5、-取出某个值，放入到新的集合中" class="headerlink" title="5、 取出某个值，放入到新的集合中"></a>5、 取出某个值，放入到新的集合中</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;String&gt; nameList = users.stream().collect(Collectors.mapping(User::getName, Collectors.toList()));<br></code></pre></div></td></tr></table></figure><h5 id="6、-其他方法"><a href="#6、-其他方法" class="headerlink" title="6、 其他方法"></a>6、 其他方法</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>list.add(<span class="hljs-number">1</span>);<br>list.add(<span class="hljs-number">4</span>);<br>list.add(<span class="hljs-number">3</span>);<br>list.add(<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// static void swap(List list, int i, int j) :将指定列表中的两个索引进行位置互换</span><br>Collections.swap(list, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// static void  sort(List&lt;T&gt; list) :按照列表中元素的自然顺序进行排序</span><br>Collections.sort(list);<br><br><span class="hljs-comment">// static void shuffle(List list) :洗牌，随机置换</span><br>Collections.shuffle(list);<br><br><span class="hljs-comment">// static void reverse(List list)  :元素反转</span><br>Collections.reverse(list);<br><br><span class="hljs-comment">// static int  binarySearch(List list, Object key) 使用二分查找法查找指定元素在指定列表的索引位置</span><br><span class="hljs-keyword">int</span> index = Collections.binarySearch(list, <span class="hljs-number">4</span>);<br><br><span class="hljs-comment">// static void fill(List list, Object obj) :使用指定的对象填充指定列表的所有元素</span><br>Collections.fill(list, <span class="hljs-number">5</span>);<br><br><span class="hljs-comment">// static void copy(List dest, List src) :是把源列表中的数据覆盖到目标列表</span><br><span class="hljs-comment">// 注意：目标列表的长度至少等于源列表的长度</span><br><span class="hljs-comment">// 创建源列表</span><br>List&lt;String&gt; src = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>src.add(<span class="hljs-string">&quot;src_1&quot;</span>);<br>src.add(<span class="hljs-string">&quot;src_2&quot;</span>);<br>src.add(<span class="hljs-string">&quot;src_3&quot;</span>);<br><br><span class="hljs-comment">// 创建目标列表</span><br>List&lt;String&gt; dest = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>dest.add(<span class="hljs-string">&quot;dest_1&quot;</span>);<br>dest.add(<span class="hljs-string">&quot;dest_2&quot;</span>);<br>dest.add(<span class="hljs-string">&quot;dest_3&quot;</span>);<br>dest.add(<span class="hljs-string">&quot;dest_4&quot;</span>);<br>Collections.copy(dest, src);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
      <tag>Collections</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stream常用API</title>
    <link href="/2021/09/26/Stream%E5%B8%B8%E7%94%A8API/"/>
    <url>/2021/09/26/Stream%E5%B8%B8%E7%94%A8API/</url>
    
    <content type="html"><![CDATA[<h1 id="Stream-常用API"><a href="#Stream-常用API" class="headerlink" title="Stream-常用API"></a>Stream-常用API</h1><h5 id="1、joining"><a href="#1、joining" class="headerlink" title="1、joining"></a>1、joining</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;v&quot;</span>);<br>String str = strings.stream().collect(Collectors.joining(<span class="hljs-string">&quot;,&quot;</span>));<br></code></pre></div></td></tr></table></figure><h5 id="2、reduce"><a href="#2、reduce" class="headerlink" title="2、reduce"></a>2、reduce</h5><h6 id="List-lt-Integer-gt-：integers"><a href="#List-lt-Integer-gt-：integers" class="headerlink" title="List&lt;Integer&gt;：integers"></a>List&lt;Integer&gt;：integers</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;Integer&gt; integers = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>);<br></code></pre></div></td></tr></table></figure><ul><li>一个参数</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">Optional&lt;T&gt; <span class="hljs-title">reduce</span><span class="hljs-params">(BinaryOperator&lt;T&gt; accumulator)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">最大值<br>Integer max = integers.stream().reduce((a, b) -&gt; a &gt;= b ? a : b).get();<br><br>最小值<br>Integer min = integers.stream().reduce((a, b) -&gt; a &lt;= b ? a : b).get();<br><br>求和<br>Integer sum = integers.stream().reduce((a, b) -&gt; a + b).get();<br></code></pre></div></td></tr></table></figure><ul><li>两个参数</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">T <span class="hljs-title">reduce</span><span class="hljs-params">(T identity, BinaryOperator&lt;T&gt; accumulator)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">在初始化值的基础上求和<br>Integer reduce = integers.stream().reduce(<span class="hljs-number">0</span>, (integer, integer2) -&gt; integer + integer2);<br><br>字符串拼接<br>String reduced = Stream.of(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>).reduce(<span class="hljs-string">&quot;Prefix&quot;</span>, (a, b) -&gt; a.concat(b));<br></code></pre></div></td></tr></table></figure><ul><li>三个参数</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;U&gt; <span class="hljs-function">U <span class="hljs-title">reduce</span><span class="hljs-params">(U identity,</span></span><br><span class="hljs-params"><span class="hljs-function">    BiFunction&lt;U, ? <span class="hljs-keyword">super</span> T, U&gt; accumulator,</span></span><br><span class="hljs-params"><span class="hljs-function">    BinaryOperator&lt;U&gt; combiner)</span></span>;<br><br>identity: 一个初始化的值；这个初始化的值其类型是泛型U，与Reduce方法返回的类型一致<br>accumulator: 类型是BiFunction，输入是U与T两个类型的数据，而返回的是U类型；也就是说返回的类型与输入的第一个参数类型是一样的，而输入的第二个参数类型与Stream中元素类型是一样的<br>combiner: 类型是BinaryOperator，支持的是对U类型的对象进行操作<br>    <br>注意：combiner 在非并行流中并不生效<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Integer reduce1 = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>).reduce(<span class="hljs-number">4</span>, (a, b) -&gt; a + b, (a, b) -&gt; a * b);<br></code></pre></div></td></tr></table></figure><p>输出结果为 10 </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Integer reduce2 = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>).parallel().reduce(<span class="hljs-number">4</span>, (a, b) -&gt; a + b, (a, b) -&gt; a * b);<br></code></pre></div></td></tr></table></figure><p>输出结果为210</p><p>分析：非并行流中执行操作：</p><p><strong>accumulator：</strong><br>4 + 1 = 5<br>5 + 2 = 7<br>7 + 3 = 10</p><p>并行流中执行操作：</p><p><strong>accumulator：</strong><br>4 + 1 = 5<br>4 + 2 = 6<br>4 + 3 = 7</p><p><strong>combiner：</strong><br>5 * 6 = 30<br>30 * 7 = 210</p><h5 id="3、sorted"><a href="#3、sorted" class="headerlink" title="3、sorted"></a>3、sorted</h5><h6 id="Bean：User"><a href="#Bean：User" class="headerlink" title="Bean：User"></a>Bean：User</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">User.class:<br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String level;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="List-lt-User-gt-：users"><a href="#List-lt-User-gt-：users" class="headerlink" title="List&lt;User&gt;：users"></a>List&lt;User&gt;：users</h6><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;User&gt; users = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&quot;D&quot;</span>));<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&quot;C&quot;</span>));<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-number">19</span>,  <span class="hljs-string">&quot;A&quot;</span>));<br>users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">22</span>,  <span class="hljs-string">&quot;B&quot;</span>));<br></code></pre></div></td></tr></table></figure><ul><li>升序</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;User&gt; sortedUserList = users.stream().sorted(Comparator.comparing(User::getAge)).collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure><ul><li>降序</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;User&gt; sortedUserList = users.stream().sorted(Comparator.comparing(User::getAge).reversed()).collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure><ul><li>多字段升序</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;User&gt; sortedUserList = users.stream().sorted(Comparator.comparing(User::getAge).thenComparing(User::getLevel)).collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure><ul><li>多字段降序</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;User&gt; sortedUserList = users.stream().sorted(Comparator.comparing(User::getAge).thenComparing(User::getLevel).reversed()).collect(Collectors.toList());<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
      <tag>Stream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下JDK（JAVA环境）安装</title>
    <link href="/2021/09/19/%E6%95%99%E7%A8%8B/Linux%E4%B8%8BJDK%EF%BC%88JAVA%E7%8E%AF%E5%A2%83%EF%BC%89%E5%AE%89%E8%A3%85/"/>
    <url>/2021/09/19/%E6%95%99%E7%A8%8B/Linux%E4%B8%8BJDK%EF%BC%88JAVA%E7%8E%AF%E5%A2%83%EF%BC%89%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux下JDK（JAVA环境）安装"><a href="#Linux下JDK（JAVA环境）安装" class="headerlink" title="Linux下JDK（JAVA环境）安装"></a>Linux下JDK（JAVA环境）安装</h1><blockquote><p>注意：这⾥安装的是Oracle JDK</p></blockquote><h2 id="准备JDK安装包"><a href="#准备JDK安装包" class="headerlink" title="准备JDK安装包"></a>准备JDK安装包</h2><p>我这⾥下载的是 <a href="https://download.oracle.com/otn/java/jdk/8u261-b12/a4634525489241b9a9e1aa73d9e118e6/jdk-8u261-linux-x64.tar.gz?AuthParam=1597465946_ba6eb0f7d55bd39c9a0d166c39dbceda">jdk-8u261-linux-i586.tar.gz</a>，安装包，并将其直接放在了 <code>root</code> 目录下</p><h3 id="1-卸载已有的OPENJDK（如果有"><a href="#1-卸载已有的OPENJDK（如果有" class="headerlink" title="1. 卸载已有的OPENJDK（如果有)"></a>1. 卸载已有的OPENJDK（如果有)</h3><p>如果系统⾃带有 <code>OpenJDK</code> ，可以按照如下步骤提前卸载之。</p><p>⾸先查找已经安装的 <code>OpenJDK</code> 包：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">rpm -qa | grep java<br></code></pre></div></td></tr></table></figure><p>如果有就将 java 开头的安装包均卸载即可:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum -y remove java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64<br>yum -y remove java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64<br><br>... 省略 ...<br></code></pre></div></td></tr></table></figure><p>我这里没有，就可以直接下一步</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@iZbp19oigcst5l5m3e6pdfZ ~]# rpm -qa | grep java<br>[root@iZbp19oigcst5l5m3e6pdfZ ~]# <br></code></pre></div></td></tr></table></figure><h3 id="2-创建⽬录并解压"><a href="#2-创建⽬录并解压" class="headerlink" title="2. 创建⽬录并解压"></a>2. 创建⽬录并解压</h3><p>1、在<code> /usr/local/</code> 下创建 <code>java</code> ⽂件夹并进⼊</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /usr/local/<br>mkdir java<br>cd java<br></code></pre></div></td></tr></table></figure><ol start="2"><li>将上⾯准备好的 JDK 安装包解压到 <code>/usr/local/java</code> 中即可</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">tar -zxvf /root/jdk-8u261-linux-x64.tar.gz -C ./<br></code></pre></div></td></tr></table></figure><p>解压完之后，<code> /usr/local/java</code> ⽬录中会出现⼀个 <code>jdk1.8.0_261</code> 的⽬录</p><h3 id="3-配置JDK环境变量"><a href="#3-配置JDK环境变量" class="headerlink" title="3. 配置JDK环境变量"></a>3. 配置JDK环境变量</h3><p>编辑 <code>/etc/profile</code> ⽂件，在⽂件尾部加⼊如下 <code>JDK</code> 环境配置即可</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">JAVA_HOME=/usr/local/java/jdk1.8.0_261<br>CLASSPATH=$JAVA_HOME/lib/<br>PATH=$PATH:$JAVA_HOME/bin<br>export PATH JAVA_HOME CLASSPATH<br></code></pre></div></td></tr></table></figure><p>然后执⾏如下命令让环境变量⽣效</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">source /etc/profile<br></code></pre></div></td></tr></table></figure><h3 id="4-验证JDK安装结果"><a href="#4-验证JDK安装结果" class="headerlink" title="4. 验证JDK安装结果"></a>4. 验证JDK安装结果</h3><p>输⼊如下命令即可检查安装结果：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">java -version<br><br>javac<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDK</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 8安装Docker</title>
    <link href="/2021/09/19/%E6%95%99%E7%A8%8B/centOS8%E5%AE%89%E8%A3%85Docker/"/>
    <url>/2021/09/19/%E6%95%99%E7%A8%8B/centOS8%E5%AE%89%E8%A3%85Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="CentOS-8安装Docker"><a href="#CentOS-8安装Docker" class="headerlink" title="CentOS 8安装Docker"></a>CentOS 8安装Docker</h1><blockquote><p>官方参考地址：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a><br>国外的Docker镜像很慢，本文基于阿里云镜像</p></blockquote><h5 id="1-卸载旧版本"><a href="#1-卸载旧版本" class="headerlink" title="1. 卸载旧版本"></a>1. 卸载旧版本</h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum remove docker \<br>                docker-client \<br>                docker-client-latest \<br>                docker-common \<br>                docker-latest \<br>                docker-latest-logrotate \<br>                docker-logrotate \<br>                docker-engine<br></code></pre></div></td></tr></table></figure><h5 id="2-安装Docker"><a href="#2-安装Docker" class="headerlink" title="2. 安装Docker"></a>2. 安装Docker</h5><ol><li>安装之前我们先安装下<code>yum-utils</code>，为了通过 <code>yum-config-manager</code> 命令来设置 镜像仓库地址</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install yum-utils<br></code></pre></div></td></tr></table></figure><ol start="2"><li>设置镜像仓库地址</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></div></td></tr></table></figure><ol start="3"><li>安装 docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install docker-ce docker-ce-cli containerd.io<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>报错：</strong><font color=#FF0000>  <code>No match for argument: containerd.io</code></font>  </p><p><strong>原因：</strong><code>centos8默认使用podman代替docker，所以需要containerd.io，就安装一下就好了</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/containerd.io-1.4.9-3.1.el7.x86_64.rpm<br></code></pre></div></td></tr></table></figure></blockquote><ol start="4"><li>继续安装docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yum install docker-ce docker-ce-cli containerd.io<br></code></pre></div></td></tr></table></figure><ol start="5"><li>启动docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl start docker.service<br></code></pre></div></td></tr></table></figure><ol start="6"><li>设置docker开机自启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl enable docker.service<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
