<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>乍暖还寒</title>
  
  <subtitle>乍暖还寒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-24T16:28:39.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>乍暖还寒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>V2ray</title>
    <link href="http://yoursite.com/2020/03/25/V2ray/"/>
    <id>http://yoursite.com/2020/03/25/V2ray/</id>
    <published>2020-03-24T16:28:39.000Z</published>
    <updated>2020-03-24T16:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V2ray"><a href="#V2ray" class="headerlink" title="V2ray"></a>V2ray</h1><h3 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h3><p><code>bash &lt;(curl -s -L https://git.io/v2ray.sh)</code><br>ubuntu/debian 系统安装 Curl 方法: <code>apt-get update -y &amp;&amp; apt-get install curl -y</code><br>centos 系统安装 Curl 方法: <code>yum update -y &amp;&amp; yum install curl -y</code><br>安装完成后，输入<code>v2ray</code> 即可管理 V2Ray</p><h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><p><code>v2ray info</code> 查看 V2Ray 配置信息<br><code>v2ray config</code> 修改 V2Ray 配置<br><code>v2ray link</code> 生成 V2Ray 配置文件链接<br><code>v2ray infolink</code> 生成 V2Ray 配置信息链接<br><code>v2ray qr</code> 生成 V2Ray 配置二维码链接<br><code>v2ray ss</code> 修改 Shadowsocks 配置<br><code>v2ray ssinfo</code> 查看 Shadowsocks 配置信息<br><code>v2ray ssqr</code> 生成 Shadowsocks 配置二维码链接<br><code>v2ray status</code> 查看 V2Ray 运行状态<br><code>v2ray start</code> 启动 V2Ray<br><code>v2ray stop</code> 停止 V2Ray<br><code>v2ray restart</code> 重启 V2Ray<br><code>v2ray log</code> 查看 V2Ray 运行日志<br><code>v2ray update</code> 更新 V2Ray<br><code>v2ray update.sh</code> 更新 V2Ray 管理脚本<br><code>v2ray uninstall</code> 卸载 V2Ray</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>V2Ray 配置文件路径：<code>/etc/v2ray/config.json</code><br>Caddy 配置文件路径：<code>/etc/caddy/Caddyfile</code><br>脚本配置文件路径:<code>/etc/v2ray/233blog_v2ray_backup.conf</code></p><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p><code>V2Ray： https://www.v2ray.com/</code><br><code>233boy: https://github.com/233boy/v2ray</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;V2ray&quot;&gt;&lt;a href=&quot;#V2ray&quot; class=&quot;headerlink&quot; title=&quot;V2ray&quot;&gt;&lt;/a&gt;V2ray&lt;/h1&gt;&lt;h3 id=&quot;安装脚本&quot;&gt;&lt;a href=&quot;#安装脚本&quot; class=&quot;headerlink&quot; title=&quot;安装脚本&quot;
      
    
    </summary>
    
    
      <category term="V2ray" scheme="http://yoursite.com/categories/V2ray/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Git总结</title>
    <link href="http://yoursite.com/2020/03/24/Git%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/03/24/Git%E6%80%BB%E7%BB%93/</id>
    <published>2020-03-24T08:49:15.000Z</published>
    <updated>2020-03-24T08:49:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git学习总结"><a href="#Git学习总结" class="headerlink" title="Git学习总结"></a>Git学习总结</h1><ul><li><h3 id="本地操作流程"><a href="#本地操作流程" class="headerlink" title="本地操作流程"></a>本地操作流程</h3></li><li><p>工作区（WorkingDirectory）</p><ul><li>添加、编辑、修改文件等操作</li></ul></li><li><p>暂存区</p><ul><li>暂存已经修改的文件，最后统一提交到Git仓库 </li></ul></li><li><p>Git Repository（Git 仓库）</p><ul><li>最终确定的文件保存仓库，成为一个人新的版本，并且对他人可见</li></ul></li></ul><hr><p>常用指令 ：git add 、git commit 、git status</p><pre><code>工作区 ---git add ---&gt;  暂存区 ---git commit---&gt;Git仓库 </code></pre><hr><ul><li><h3 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h3></li><li><p>安装好之后进行全局配置</p><pre><code>$git config --global user.name &quot;username&quot;$git config --global user.email &quot;email&quot;</code></pre></li><li><p>选择文件夹进行Git初始化(告诉Git管理此目录)</p><pre><code>git init</code></pre><pre><code>  .git隐藏文件夹不能随意更改内容</code></pre></li><li><h5 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h5></li><li><p>git status<br>  查看当前可进行的操作</p></li><li><p>git add</p><pre><code>  1.git add  文件名  2.git add  文件名1  文件名2  文件名3  ...  3.git add  .        【添加当前目录到缓存区】</code></pre></li><li><p>git commit</p><pre><code>git commit -m &quot;注释&quot;</code></pre></li><li><h5 id="Git指令"><a href="#Git指令" class="headerlink" title="Git指令"></a>Git指令</h5></li><li><p>查看版本<br>  1.<code>git log</code><br>  显示Git操作日志</p><p>  2.<code>git log --pretty=oneline</code><br>  时间+操作    显示</p></li><li><p>回退操作<br>  <strong>git reset –hard 版本号</strong><br>【回到过去之后，再回到未来，则需要使用指令去查看历史操作，以得到未来的commit id】</p></li><li><p><code>git reflog</code></p></li></ul><hr><ul><li><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3></li><li><h5 id="两种常规使用方式"><a href="#两种常规使用方式" class="headerlink" title="两种常规使用方式"></a>两种常规使用方式</h5></li><li>Use HTTPS<br>  使用clone指令克隆线上仓库到本地<pre><code>  `git clone 线上仓库地址`</code></pre>  在仓库上做对应的操作（提交暂存区、提交本地仓库、提交线上仓库、拉取线上仓库）<br>  提交到线上仓库指令：<code>git push</code><pre><code>  首次线上仓库提交需要授权  版本过低则需要修改.git目录中的config文        件，在remote中的url栗的github.com           前面加上`username:password@`</code></pre>  拉取线上仓库到本地指令：<code>git pull</code></li><li><h6 id="每天上班前第一件事-git-pull-拉取最新到本地"><a href="#每天上班前第一件事-git-pull-拉取最新到本地" class="headerlink" title="每天上班前第一件事 git pull 拉取最新到本地"></a>每天上班前第一件事 git pull 拉取最新到本地</h6></li><li><h6 id="每天下班最后一件事git-push提交最新到线上"><a href="#每天下班最后一件事git-push提交最新到线上" class="headerlink" title="每天下班最后一件事git push提交最新到线上"></a>每天下班最后一件事git push提交最新到线上</h6></li><li>Use SSH（鉴权方式不同）（比较容易）<ul><li>创建公私钥对（openssh）</li><li><code>ssh-keygen -t rsa -c &quot;email&quot;</code></li><li>三回车</li><li>上传公钥到Github</li><li>后续操作与HTTPS 相同</li></ul></li></ul><hr><ul><li><h3 id="分支相关"><a href="#分支相关" class="headerlink" title="分支相关"></a>分支相关</h3></li><li><p>查看分支：<code>git branch</code></p></li><li><p>创建分支：<code>git branch 分支名</code></p></li><li><p>切换分支：<code>git checkout 分支名</code></p><ul><li>对于新分支，可以使用<code>git checkout -b</code> 分支名指令来切换分支，-b表示创建并切换，相当于两个指令</li></ul></li><li><p>删除分支：<code>git branch -d 分支名</code></p></li><li><p>合并分支：<code>git merge 被合并的分支名</code></p></li><li><h3 id="冲突的产生与解决"><a href="#冲突的产生与解决" class="headerlink" title="冲突的产生与解决"></a>冲突的产生与解决</h3></li><li><p>先pull到本地</p></li><li><p>然后解决冲突</p></li><li><p>重新push</p></li><li><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>忽略文件需要新建一个名为<code>.gitignore</code>的文件，用于声明忽略文件或者不忽略文件规则，规则对当前目录及其子目录生效<br>  该文件没有文件名，只能听过命令行<code>Git bash</code>来        <code>touch</code>创建</p></li></ul><p>1.<code>/文件夹名字/</code>过滤整个文件夹<br>2.<code>*.zip</code>过滤所有.zip文件<br>3.<code>/文件夹名字/do.c</code>过滤某个具体文件<br>4.<code>!index.php</code>不过滤某个具体文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git学习总结&quot;&gt;&lt;a href=&quot;#Git学习总结&quot; class=&quot;headerlink&quot; title=&quot;Git学习总结&quot;&gt;&lt;/a&gt;Git学习总结&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;本地操作流程&quot;&gt;&lt;a href=&quot;#本地操作流程&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>“踩坑”之旅</title>
    <link href="http://yoursite.com/2020/03/24/%E8%B8%A9%E5%9D%91/"/>
    <id>http://yoursite.com/2020/03/24/%E8%B8%A9%E5%9D%91/</id>
    <published>2020-03-24T03:30:08.000Z</published>
    <updated>2020-03-24T03:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="“踩坑”告一段落"><a href="#“踩坑”告一段落" class="headerlink" title="“踩坑”告一段落"></a>“踩坑”告一段落</h1><ul><li>找到了喜欢的主题</li><li>踩坑也算完成吧</li><li>主题可玩性感觉还可以</li><li>修改很便捷</li><li>添加”tags“和”categories“，费了不少力气</li><li>接下来就是努力</li><li>加油！！！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;“踩坑”告一段落&quot;&gt;&lt;a href=&quot;#“踩坑”告一段落&quot; class=&quot;headerlink&quot; title=&quot;“踩坑”告一段落&quot;&gt;&lt;/a&gt;“踩坑”告一段落&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;找到了喜欢的主题&lt;/li&gt;
&lt;li&gt;踩坑也算完成吧&lt;/li&gt;
&lt;li&gt;主题可玩性
      
    
    </summary>
    
    
      <category term="杂项" scheme="http://yoursite.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>Github+HEXO (win)</title>
    <link href="http://yoursite.com/2020/03/24/github+hexo/"/>
    <id>http://yoursite.com/2020/03/24/github+hexo/</id>
    <published>2020-03-24T02:25:26.000Z</published>
    <updated>2020-03-24T02:25:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github-HEXO-win"><a href="#Github-HEXO-win" class="headerlink" title="Github+HEXO (win)"></a>Github+HEXO (win)</h1><ul><li><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4></li><li><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4></li><li><h4 id="本地创建Hexo存储文件夹"><a href="#本地创建Hexo存储文件夹" class="headerlink" title="本地创建Hexo存储文件夹"></a>本地创建Hexo存储文件夹</h4></li><li><h4 id="文件夹内CMD"><a href="#文件夹内CMD" class="headerlink" title="文件夹内CMD"></a>文件夹内CMD</h4><ul><li>可通过cmd命令移动到文件夹，也可以在文件夹地址栏直接输入cmd</li></ul></li><li><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><pre><code>npm install -g hexo-cli3</code></pre></li></ul><p>安装完成，可能会有WARN，但不会影响正常使用</p><pre><code>npm install hexo --save</code></pre><p>Hexo安装完成，检测是否正确安装</p><pre><code>hexo -v</code></pre><ul><li><h4 id="Hexo的配置"><a href="#Hexo的配置" class="headerlink" title="Hexo的配置"></a>Hexo的配置</h4></li><li><p>在当前目录下新建一个名为blog的文件夹，用于存放博客网站的信息<br>命令行进入blog，初始化该文件夹，并安装所需组件</p><pre><code>hexo init npm install</code></pre></li><li><p>安装完成后，检测是否安装成功</p><pre><code>hexo ghexo s</code></pre></li><li><p>根据提示访问<a href="http://localhost:4000/(注意http不是https)" target="_blank" rel="noopener">http://localhost:4000/(注意http不是https)</a></p></li><li><h4 id="将GitHub-Page与Hexo关联"><a href="#将GitHub-Page与Hexo关联" class="headerlink" title="将GitHub Page与Hexo关联"></a>将GitHub Page与Hexo关联</h4></li><li><p>配置Git个人信息<br>这一步骤是为了以后我们用git命令提交不再需要繁琐的输入我们的Github帐号和密码。</p></li><li><p>在blog 目录下，执行下列命令配置你的用户名</p><pre><code>git config --global user.name &quot;username&quot;git config --global user.email &quot;emailm&quot;git config --list  //查看用户信息</code></pre></li><li><p>生成秘钥</p><pre><code>ssh-keygen -t rsa -C &quot;email&quot;</code></pre></li><li><p>生成文件默认路径</p><pre><code>C:\Users\zzl\.ssh</code></pre></li><li><p>输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent</p><pre><code>eval &quot;$(ssh-agent -s)&quot;</code></pre></li><li><p>再次输入命令</p><pre><code>ssh-add ~/.ssh/id_rsa</code></pre></li><li><p>添加帐号SSH Keys<br>   登录Github，点击头像下的settings，添加ssh</p></li><li><p>输入下列命令进行验证是否成功</p><pre><code>ssh -T git@github.com</code></pre></li></ul><p>接下来Hexo踩坑开始！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Github-HEXO-win&quot;&gt;&lt;a href=&quot;#Github-HEXO-win&quot; class=&quot;headerlink&quot; title=&quot;Github+HEXO (win)&quot;&gt;&lt;/a&gt;Github+HEXO (win)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;
      
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>npm使用国内镜像，解决卡顿</title>
    <link href="http://yoursite.com/2020/03/24/nodejs%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90/"/>
    <id>http://yoursite.com/2020/03/24/nodejs%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90/</id>
    <published>2020-03-24T01:10:35.000Z</published>
    <updated>2020-03-24T01:10:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm-使用国内镜像，解决卡顿"><a href="#npm-使用国内镜像，解决卡顿" class="headerlink" title="npm 使用国内镜像，解决卡顿"></a>npm 使用国内镜像，解决卡顿</h1><ul><li>换成阿里源</li><li>CMD 执行<pre><code>npm config set registry https://registry.npm.taobao.org</code></pre></li><li>验证命令</li></ul><pre><code>npm config get registry  //返回https://registry.npm.taobao.org，说明镜像配置成功。</code></pre><ul><li>安装cnpm<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre>OK！！！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;npm-使用国内镜像，解决卡顿&quot;&gt;&lt;a href=&quot;#npm-使用国内镜像，解决卡顿&quot; class=&quot;headerlink&quot; title=&quot;npm 使用国内镜像，解决卡顿&quot;&gt;&lt;/a&gt;npm 使用国内镜像，解决卡顿&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;换成阿里源&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>JDK环境配置</title>
    <link href="http://yoursite.com/2020/03/24/Java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/03/24/Java%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-03-24T00:00:08.000Z</published>
    <updated>2020-03-24T00:00:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDK环境"><a href="#JDK环境" class="headerlink" title="JDK环境"></a>JDK环境</h1><ul><li><p>从<code>https://www.oracle.com/java/technologies/javase-jdk8-downloads.html</code>下载JDK安装包</p></li><li><p>安装下载的JDK</p></li><li><p>环境变量配置：</p><ul><li>新建环境变量，变量名：“JAVA_HOME”，变量值：自己的JDK安装根目录（到JDK文件夹）</li></ul></li><li><p>PATH新增</p><ul><li><code>%JAVA_HOME%\bin</code></li></ul></li><li><p>JDK1.5之后不必配置CLASS_PATH，因为：在java1.5之后，把当前目录（运行 java.class 时所在目录）当做了classpath路径，而编译后的.class文件和.java文件在同一目录下，所以不需要配置</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JDK环境&quot;&gt;&lt;a href=&quot;#JDK环境&quot; class=&quot;headerlink&quot; title=&quot;JDK环境&quot;&gt;&lt;/a&gt;JDK环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从&lt;code&gt;https://www.oracle.com/java/technologies/j
      
    
    </summary>
    
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
